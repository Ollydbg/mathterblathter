using System;
using Client.Game.Attributes;
using UnityEngine;
using System.Linq;

namespace Client.Game.Abilities.Scripts
{
	public class InvulnerabilityBuff : BuffBase
	{
		public InvulnerabilityBuff ()
		{
		}

		Material[] mat;

		#region implemented abstract members of AbilityBase
		float timeLeft;
		Color[] startingColor;
		public override void Start ()
		{
			this.context.source.Attributes[ActorAttributes.TakesDamage] = false;
			this.timeLeft = this.Attributes[AbilityAttributes.Duration];

			mat = this.context.source.GameObject.GetComponentsInChildren<Renderer>().Select(p => p.material).ToArray();
			startingColor = mat.Select(p => p.color).ToArray();
		}

		public override void Update (float dt)
		{
			timeLeft -= dt;

			foreach(Material m in mat) 
				m.color = (float)Math.Sin(timeLeft*10f) * Color.red;
		}

		public override bool IsComplete ()
		{
			return timeLeft <= 0;
		}

		public override void End ()
		{
			this.context.source.Attributes[ActorAttributes.TakesDamage] = true;
			for( int i = 0; i< mat.Length; i++ ) {
				mat[i].color = startingColor[i];
			}
		}

		#endregion
	}
}

